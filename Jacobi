package mncclase1;
public class Jacobi {
    public static void main(String[] args) {
        int a [][]= {
                    {4,-1,1},
                    {4,-8,1},
                    {-2,1,5}
                    };
        int b[]={7,-21,15};
        double xv[]={0,0,0};
        double tol = 10e-5;
        double suma = 0;
        int iter = 0;
        double error = 0;
        double xn[]={0,0,0};
        int i = 0;
        int p = 0;
        int swap = 0;
        
        //* Chequear que no haya ceros en la diagonal (pivoteo)
        p = i;
                if (Math.abs(a[i][i]) < 10e-5){
                    for  (int l = i+1; l < 3; l++){
                        if (Math.abs(a[l][i])> Math.abs(a[i][i])){
                            p = l;
                        }
                    }
                    for (int m = 0; m<3; m++){
                        swap = a[p][m];
                        a[p][m] = a[i][m];
                        a[i][m] = swap;
                    }
                    swap = b[p];
                    b[p] = b[i];
                    b[i] = swap;
                }
        //* Chequear si la matriz es Diagonal dominante
        
        for (i = 1; i < 3; i++){
            suma = 0;
            for (int j = 1; j < 3; j++){
                if (j!=i){
                    suma += Math.abs(a[i][j]);
                }
            }
            if (Math.abs(a[i][i])<= suma){
                System.out.println("La matriz no es diagonalmente dominante, el metodo podria no conveger\n");
            }
        }
        
        // HASTA ACA ERROR = 0
       iter = 0;
       do{
           iter++;
           for (i = 0; i < 3; i++){
               suma = 0;
               for (int j = 0; j < 3; j++){
                   if (j!=i){
                       suma = suma + a[i][j]*xv[j];
                   }
               }
               xn[i]= (b[i]-suma)/a[i][i];
           }
           suma = 0;
           for (i = 0; i < 3; i++){
               suma = (suma + Math.pow((xn[i]-xv[i]), 2));
           }
           error = Math.pow(suma, 1/2);
           
           
           
           
           for (i = 0; i < 3; i++){
               xv[i] = xn[i];
           }
       }while (error > tol && iter <= 10000);
       
       for(int k=0;k<3;k++){
            System.out.println("X"+ (k+1) + " = " +xn[k]);
        }
    }
}

